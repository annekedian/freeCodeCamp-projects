# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn_Anneke.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJZhsOflfCAb3BdAsyBIdJeLRZm3l_YX
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# add your code here - consider creating a new cell for each section of code

#filter based on isbn and user
isbnfilter = df_ratings['isbn'].value_counts()
userfilter = df_ratings['user'].value_counts()

#menghapus data dalam dataframe dengan user < 200 dan isbn < 100
df_ratings = df_ratings[~df_ratings.user.isin(userfilter[userfilter < 200].index) &
                        ~df_ratings.isbn.isin(isbnfilter[isbnfilter < 100].index)]

df_table = df_ratings.pivot_table(index='isbn', columns='user', values='rating').fillna(0)
df_table.index = df_table.join(df_books.set_index('isbn'))['title']
df_table.head(3)

# function to return recommended books - this will be tested
def get_recommends(title = ""):

  #Exception for books that never exist in dataframe
  try :
    book = df_table.loc[title]
  except KeyError as e:
    print('The given book with title', e, 'does not record in our data')
    return

  recommended_books = []
  knn = NearestNeighbors(n_neighbors = 6, metric = "cosine").fit(df_table.values)
  distance, indice = knn.kneighbors([df_table.loc[title].values], n_neighbors = 6)
  for i in range (1,6):
    recommended_books.append([df_table.index[indice[0][-i]], distance[0][-i]])

  return [title, recommended_books]

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰ðŸŽ‰")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()

get_recommends("Where")

